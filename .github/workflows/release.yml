name: Release

on:
  push:
    tags:
    - RELEASE_*

jobs:
  version:
    name: Determine Release Version
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
    - name: Determine release version
      id: version
      run: |
        if echo "${{ github.ref }}" | grep -E "^refs/tags/RELEASE_[0-9]+\.[0-9]+$" > /dev/null; then
            echo "version=$(echo "${{ github.ref }}" | sed -E "s|^refs/tags/RELEASE_([0-9]+\.[0-9]+)$|\1|")" >> "$GITHUB_OUTPUT"
        else
            false
        fi

  src:
    name: Build Source Package
    runs-on: ubuntu-latest
    needs: version

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install additional packages
      run: |
        sudo apt-get -y update
        sudo apt-get -y install autoconf automake

    - name: Create package
      run: |
        autoreconf -f -i -Wall,error
        ./configure
        sudo make distcheck "CFLAGS=-Werror"

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: package-src
        path: bwping-${{ needs.version.outputs.version }}.tar.gz
        if-no-files-found: error
        retention-days: 1

  cygwin:
    name: Build Cygwin Package
    runs-on: windows-latest
    needs: version

    defaults:
      run:
        shell: cmd

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install additional packages
      run: |
        choco.exe install cygwin cyg-get zip unzip -y && ^
        cyg-get.bat autoconf automake make gcc-core git

    - name: Fix Git settings
      run: |
        C:\tools\cygwin\bin\bash.exe -l -eo pipefail -c ^"^
            cd ""$GITHUB_WORKSPACE""; ^
            git config --global --add safe.directory ""$(pwd)""^"

    - name: Fix line endings
      run: |
        C:\tools\cygwin\bin\bash.exe -l -eo pipefail -c ^"^
            cd ""$GITHUB_WORKSPACE""; ^
            git ls-files -z ^| xargs -0 rm; ^
            git checkout -f .^"

    - name: Run build
      run: |
        C:\tools\cygwin\bin\bash.exe -l -eo pipefail -c ^"^
            cd ""$GITHUB_WORKSPACE""; ^
            autoreconf -f -i -Wall,error; ^
            ./configure; ^
            make ""CFLAGS=-Werror""^"

    - name: Run checks
      run: |
        C:\tools\cygwin\bin\bash.exe -l -eo pipefail -c ^"^
            cd ""$GITHUB_WORKSPACE""; ^
            make check^"

    - name: Create package
      shell: bash
      run: |
        OUTPUT="$(zip.exe -j "bwping-${{ needs.version.outputs.version }}-win64.zip" AUTHORS bwping.exe COPYING C:\\tools\\cygwin\\bin\\cygwin1.dll README 2>&1)"
        [[ "$(echo "$OUTPUT" | grep -E -v "^\s*adding: ")" == "" ]] || ( echo "$OUTPUT" && false )

    - name: Verify package
      shell: bash
      run: |
        unzip.exe "bwping-${{ needs.version.outputs.version }}-win64.zip" -d .package
        OUTPUT="$(cmd.exe //c "set PATH= & .package\\bwping.exe" 2>&1 || true)"
        [[ "$(echo "$OUTPUT" | grep -v "^bwping is part of the " | grep -v "^Usage: ")" == "" ]] || ( echo "$OUTPUT" && false )

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: package-cygwin
        path: bwping-${{ needs.version.outputs.version }}-win64.zip
        if-no-files-found: error
        retention-days: 1

  upload:
    name: Upload Packages
    runs-on: ubuntu-latest
    needs:
    - version
    - src
    - cygwin

    defaults:
      run:
        shell: bash

    steps:
    - name: Download source package artifact
      uses: actions/download-artifact@v3
      with:
        name: package-src

    - name: Download Cygwin package artifact
      uses: actions/download-artifact@v3
      with:
        name: package-cygwin

    - name: Upload packages to GitHub
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifactErrorsFailBuild: true
        artifacts: bwping-${{ needs.version.outputs.version }}.tar.gz, bwping-${{ needs.version.outputs.version }}-win64.zip
        draft: true
        name: BWPing ${{ needs.version.outputs.version }}
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload packages to SourceForge
      env:
        SF_PRIVATE_KEY: ${{ secrets.SF_PRIVATE_KEY }}
      run: |
        eval "$(ssh-agent)"
        echo "$SF_PRIVATE_KEY" | ssh-add -
        mkdir -p ~/.ssh
        echo "frs.sourceforge.net ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOQD35Ujalhh+JJkPvMckDlhu4dS7WH6NsOJ15iGCJLC" >> ~/.ssh/known_hosts
        sftp -b - oleg_derevenetz@frs.sourceforge.net << EOF
        mkdir /home/frs/project/bwping/bwping/${{ needs.version.outputs.version }}
        cd /home/frs/project/bwping/bwping/${{ needs.version.outputs.version }}
        put bwping-${{ needs.version.outputs.version }}.tar.gz
        cd /home/frs/project/bwping/ports/win64
        put bwping-${{ needs.version.outputs.version }}-win64.zip
        EOF
